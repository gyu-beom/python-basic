# 다양한 출력포맷

'''
- 다양한 출력포맷

format()
f-string

- format()
{인덱스:[[빈자리채우기]정렬][기호][확보공간][콤마][.자리수][타입]}

- f-string
{[[빈자리채우기]정렬][기호][확보공간][콤마][.자리수][타입]}
'''

# format() 자리
print('{0}'.format(500))
print('{0: >10}'.format(500)) # 빈 자리 : 공백, 우측 정렬, 10칸 공간 확보
print('{0: >+10}'.format(500)) # 빈 자리 : 공백, 우측 정렬, + 기호, 10칸 공간 확보
print('{0: >+10}'.format(-500)) # 빈 자리 : 공백, 우측 정렬, + 기호, 10칸 공간 확보
print('{0:_<10}'.format(500)) # 빈 자리 : _, 좌측 정렬, 10칸 공간 확보

# format() 콤마
print('{0:,}'.format(100000000000))
print('{0:+,}'.format(100000000000))
print('{0:+,}'.format(-100000000000))

# format() 복잡한 예제
print('{0:^<+30,}'.format(100000000000)) # 빈 자리 : ^, 좌측 정렬, + 기호, 30칸의 공간 확보, 3자리 마다 콤마

# format() 실수 (반올림 기본)
print('{0:f}'.format(5/3)) # 실수 값 출력
print('{0:.2f}'.format(5/3)) # 소수점 둘째자리까지 출력

# f-string 자리
print(f'{500}')
print(f'{500: >10}')
print(f'{500: >+10}')
print(f'{-500: >+10}')
print(f'{500:_<10}')

# f-string 콤마
print(f'{100000000000:,}')
print(f'{100000000000:+,}')
print(f'{-100000000000:+,}')

# f-string 복잡한 예제
print(f'{100000000000:^<+30,}')

# f-string 실수 (반올림 기본)
print(f'{5/3:f}')
print(f'{5/3:.2f}')